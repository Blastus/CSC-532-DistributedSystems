# This is a description of an original assembly language for WS.
WSA_V1 = dict(retrieve =         '     get',
              store =            '     set',
              read_number =      '     iint',
              read_character =   '     ichr',
              output_number =    '     oint',
              output_character = '     ochr',
              modulo =           '     mod',
              integer_division = '     div',
              subtraction =      '     sub',
              multiplication =   '     mul',
              addition =         '     add',
              jump_if_negative = '     less "{label}"',
              end_subroutine =   '     back',
              jump_if_zero =     '     zero "{label}"',
              end_program =      '     exit',
              call_subroutine =  '     call "{label}"',
              jump_always =      '     goto "{label}"',
              mark_location =    'part "{label}"',
              slide =            '     away {number}',
              copy =             '     copy {number}',
              swap =             '     swap',
              discard =          '     away',
              duplicate =        '     copy',
              push =             '     push {number}',
              number =           '[+-]?\d+',
              label =            '\w+',
              comment =          '#.*',
              empty =            '')

# Whitespace
WSA_V2 = dict(retrieve         = '    retrieve',
              store            = '    store',
              read_number      = '    read_number',
              read_character   = '    read_character',
              output_number    = '    output_number',
              output_character = '    output_character',
              modulo           = '    modulo',
              integer_division = '    integer_division',
              subtraction      = '    subtraction',
              multiplication   = '    multiplication',
              addition         = '    addition',
              jump_if_negative = '    jump_if_negative {label}',
              end_subroutine   = '    end_subroutine',
              jump_if_zero     = '    jump_if_zero {label}',
              end_program      = '    end_program',
              call_subroutine  = '    call_subroutine {label}',
              jump_always      = '    jump_always {label}',
              mark_location    = '{label}:',
              slide            = '    slide {number}',
              copy             = '    copy {number}',
              swap             = '    swap',
              discard          = '    discard',
              duplicate        = '    duplicate',
              push             = '    push {number}',
              number           = '0|[+-]?[1-9]\d*',
              label            = '[A-Z_a-z]\w*',
              comment          = '( {4})*#(\s.*\S)?',
              empty            = '')

# Python
WSA_PY = dict(retrieve         = '    LOAD_GLOBAL',
              store            = '    STORE_GLOBAL',
              read_number      = '    CALL_FUNCTION sys.read_int',
              read_character   = '    CALL_FUNCTION sys.read_chr',
              output_number    = '    CALL_FUNCTION sys.write_int',
              output_character = '    CALL_FUNCTION sys.write_chr',
              modulo           = '    INPLACE_MODULO',
              integer_division = '    INPLACE_FLOOR_DIVIDE',
              subtraction      = '    INPLACE_SUBTRACT',
              multiplication   = '    INPLACE_MULTIPLY',
              addition         = '    INPLACE_ADD',
              jump_if_negative = '    POP_JUMP_IF_NEGATIVE {label}',
              end_subroutine   = '    RETURN_VALUE',
              jump_if_zero     = '    POP_JUMP_IF_ZERO {label}',
              end_program      = '    CALL_FUNCTION sys.exit',
              call_subroutine  = '    CALL_FUNCTION {label}',
              jump_always      = '    JUMP_ABSOLUTE {label}',
              mark_location    = '>>  {label}',
              slide            = '    POP_TOS {number}',
              copy             = '    DUP_TOS {number}',
              swap             = '    ROT_TWO',
              discard          = '    POP_TOP',
              duplicate        = '    DUP_TOP',
              push             = '    LOAD_CONST {number}',
              number           = '[+-]?([1-9]\d*|0+)',
              label            = '[a-zA-Z_]\w*',
              comment          = '\s*#.*',
              empty            = '')

# Spanish
WSA_ES = dict(retrieve         = '    cobrar',
              store            = '    almacenar',
              read_number      = '    leer_numero',
              read_character   = '    leer_caracter',
              output_number    = '    imprimir_numero',
              output_character = '    imprimir_caracter',
              modulo           = '    modulo',
              integer_division = '    division_entera',
              subtraction      = '    sustraccion',
              multiplication   = '    multiplicacion',
              addition         = '    adicion',
              jump_if_negative = '    saltar_si_negativo {label}',
              end_subroutine   = '    terminar_subrutina',
              jump_if_zero     = '    saltar_si_cero {label}',
              end_program      = '    terminar_programa',
              call_subroutine  = '    llamar_subrutina {label}',
              jump_always      = '    saltar_siempre {label}',
              mark_location    = '{label}:',
              slide            = '    resbalar {number}',
              copy             = '    copiar {number}',
              swap             = '    intercambiar',
              discard          = '    desechar',
              duplicate        = '    duplicar',
              push             = '    fomentar {number}',
              number           = '0|[+-]?[1-9]\d*',
              label            = '[A-Z_a-z]\w*',
              comment          = '( {4})*#(\s.*\S)?',
              empty            = '')

# x86
WSA_X86 = dict(retrieve         = '    pop ax push [ax]',
               store            = '    pop ax pop bx mov [bx], ax',
               read_number      = '    call .read_int',
               read_character   = '    mov ah, 0 int 22 pop bx mov [bx], al',
               output_number    = '    call .write_int',
               output_character = '    pop al mov ah, 14 int 16',
               modulo           = '    pop bx pop ax idiv bx push dx',
               integer_division = '    pop bx pop ax idiv bx push ax',
               subtraction      = '    pop bx pop ax sub ax, bx push ax',
               multiplication   = '    pop bx pop ax imul bx push ax',
               addition         = '    pop bx pop ax add ax, bx push ax',
               jump_if_negative = '    pop ax cmp ax, 0 jl {label}',
               end_subroutine   = '    ret',
               jump_if_zero     = '    pop ax cmp ax, 0 je {label}',
               end_program      = '    hlt',
               call_subroutine  = '    call {label}',
               jump_always      = '    jmp {label}',
               mark_location    = '{label}:',
               slide            = '    pop ax add sp, {number} * 2 push ax',
               copy             = '    push [ss:sp+{number}*2]',
               swap             = '    pop ax pop bx push ax push bx',
               discard          = '    sub sp, 2',
               duplicate        = '    push [ss:sp]',
               push             = '    push {number}',
               number           = '0|[+-]?[1-9]\d*',
               label            = '[A-Z_a-z]\w*',
               comment          = '\s*;.*',
               empty            = '')
